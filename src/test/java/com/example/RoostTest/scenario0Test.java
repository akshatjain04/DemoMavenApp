/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.http.ContentType;
import java.util.Map;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class scenario0Test{
 
    public static BufferedReader reader;
    public static String splitBy = "^|^";
    
    @BeforeEach
    public void setUp() throws Exception {
        String path = System.getProperty("user.dir")+"\\scenario0Test.csv";
        reader = new BufferedReader(new FileReader(path));
        
        String baseURI = System.getenv("API_HOST");
        if(baseURI != null && !baseURI.isEmpty())
        {
           RestAssured.baseURI = baseURI;
        }
    }
   
    @Test
    public void testFindPetByStatus() throws Exception {
        reader.readLine(); // skip headers
        String[] payload = reader.readLine().split(splitBy); // get payload
        String methodType = payload[0];
        String url = payload[1];
        Map<String, String> headers = new HashMap<> ();
        String headerLine = payload[2];
        String[] headersArray = headerLine.split(",");
       
        for(String h : headersArray){
            String[] header = h.split(":");
            headers.put(header[0],header[1]);
        }
        
        JSONObject body = (JSONObject) new JSONParser().parse(payload[3]);
        int expectedStatusCode = Integer.parseInt(payload[4]);
        JSONObject expectedResponseBody = (JSONObject) new JSONParser().parse(payload[5]);
        
        Response response = null;
        if (methodType.equals("GET")) {
            response = RestAssured.given().headers(headers).queryParams(body).when().get(url).andReturn();
        }
        
        assertEquals(expectedStatusCode, response.getStatusCode());
        assertEquals(expectedResponseBody, response.getBody().asString());
        
        response.then().body("status", equalTo(expectedResponseBody.get("status")))
                       .body("id", equalTo(expectedResponseBody.get("id")))
                       .body("category.id", equalTo(expectedResponseBody.get("category.id")))
                       .body("category.name", equalTo(expectedResponseBody.get("category.name")))
                       .body("name", equalTo(expectedResponseBody.get("name")))
                       .body("photoUrls[0]", equalTo(expectedResponseBody.get("photoUrls[0]")))
                       .body("tags[0]", equalTo(expectedResponseBody.get("tags[0]")))
                       .contentType(ContentType.JSON);
    }
}
