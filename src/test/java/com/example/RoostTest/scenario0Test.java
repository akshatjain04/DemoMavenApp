/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;

import org.junit.jupiter.api.Test;

import static org.mockito.ArgumentMatchers.anyDouble;

import java.io.BufferedReader;
import java.io.FileReader;
import org.json.JSONObject;

public class scenario0Test {

    static {
        RestAssured.baseURI = System.getenv("API_HOST");
    }

    @Test
    public void findPetByStatus() throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(
                "src/test/java/com/example/RoostTest/scenario0Test.csv"));
        String line = "";
        reader.readLine(); // Reading headers line

        while ((line = reader.readLine()) != null) {
            String[] columns = line.split("\\^\\|\\^", -1);
            String method = columns[0];
            String url = columns[1];
            String req_headers = columns[2];
            String req_body = columns[3];
            int response_code = Integer.parseInt(columns[4]);
            String response_body = columns[5];
            JSONObject reqHeaders = new JSONObject(req_headers);
            JSONObject reqBody = new JSONObject(req_body);
            JSONObject responseBody = new JSONObject(response_body);

            if (method.equals("GET")) {
                RestAssured.given()
                        .body(reqBody.toString())
                        .header("Content-Type", reqHeaders.getString("Content-Type"))
                        .get(url)
                        .then()
                        .assertThat()
                        .statusCode(response_code)
                        .contentType(ContentType.JSON);
                // nothing more to be validated as its not specified in the scenario to do so,
                // and the response body for this API with these parameters is also empty

            }
        }
        reader.close();
    }
}
