/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;

public class scenario1Test {

     static {
        RestAssured.baseURI = System.getenv("API_HOST");
     }

    @Test
    @DisplayName("Find pet by tags")
    public void findPetByTagsTest() {

        // Read Payload from CSV File
        File file = new File("scenario1Test.csv");
        BufferedReader br = new BufferedReader(new FileReader(file));
        String line;
        String[] headers = br.readLine().split("^|^", -1); 

        while ((line = br.readLine()) != null) { 
            String[] values = line.split("^|^", -1); 
            String method = values[0];
            String url = values[1];
            String headers = jsonStringToMap(values[2]);
            String requestBody = jsonStringToMap(values[3]);
            int responseCode = Integer.parseInt(values[4]);
            String responseBody = jsonStringToMap(values[5]);
            
        given().
            headers(headers).
            body(requestBody).
        when().
            get(url).
        then()
            .assertThat()
                .statusCode(responseCode)
                .contentType(ContentType.JSON)
            .and()
                .body("tags", equalTo("test"))
            .and()
                .body("id", notNullValue())
            .and()
                .body("category", notNullValue())
            .and()
                .body("category.id", notNullValue())
            .and()
                .body("category.name", is(String.class))
            .and()
                .body("name", is(String.class))
            .and()
                .body("photoUrls", is(String.class))
            .and()
                .body("photoUrls.0", is(String.class))
            .and()
                .body("tags", notNullValue())
            .and()
                .body("tags.0", notNullValue())
            .and()
                .body("status", anyOf(equalTo("available"), equalTo("pending"), equalTo("sold")));
        }
    }
}
