/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import org.junit.jupiter.api.Test;
import org.json.JSONObject;
import org.junit.jupiter.api.DisplayName;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

public class scenario1Test {

    static {
        RestAssured.baseURI = System.getenv("API_HOST");
    }

    @Test
    @DisplayName("Find pet by tags")
    public void findPetByTagsTest() throws Exception {

        // Read Payload from CSV File
        File file = new File("src/test/java/com/example/RoostTest/scenario1Test.csv");
        BufferedReader br = new BufferedReader(new FileReader(file));
        String line;
        br.readLine();

        while ((line = br.readLine()) != null) {
            String[] values = line.split("\\^\\|\\^", -1);
            String method = values[0];
            String url = values[1];
            Map<String, String> headers = jsonStringToMap(values[2]);
            JSONObject requestBody = new JSONObject(values[3]);
            int responseCode = Integer.parseInt(values[4]);
            Map<String, String> responseBody = jsonStringToMap(values[5]);
            given().headers(headers).body(requestBody.toString()).when().get(url).then()
                    .assertThat()
                    .statusCode(responseCode)
                    .contentType(ContentType.JSON);
            // nothing more to be validated as its not specified in the scenario to do so,
            // and the response body for this API with these parameters is also empty
        }
        br.close();
    }

    private Map<String, String> jsonStringToMap(String jsonString) {
        Map<String, String> map = new HashMap<>();
        String[] strArr = jsonString.replaceAll("\\{", "").replaceAll("\\}", "").split(",");
        for (String s : strArr) {
            String[] keyValue = s.split(":");
            if (keyValue.length != 2)
                continue;
            map.put(keyValue[0].trim().replaceAll("\"", ""), keyValue[1].trim().replaceAll("\"", ""));
        }
        return map;
    }
}