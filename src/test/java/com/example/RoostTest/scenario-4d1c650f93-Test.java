/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;

import org.testng.annotations.Test;

import java.nio.file.Paths;
import java.io.IOException;
import java.nio.file.Files;
import static org.hamcrest.Matchers.*;
import java.util.List;

import com.google.gson.Gson;

public class FindPetByTagsGivenTheApiRunningAtHttpPetstoreSwaggerIoV2WhenAGetRequestToPetFindByTagsIsMadeAndTheTagsParameterIsTestAndTheRequestExpectsJsonThenA200ResponseIsReturnedWithin50MsTest {

    // Define the base URI
    static {
      RestAssured.baseURI = System.getenv().get("API_HOST");
    }
    
    @Test
    public static void findPetByTagsTest() throws IOException {
        
        // Read the required data from CSV file
        String filePath = "src" + System.getProperty("file.separator") + "test" + System.getProperty("file.separator") + "java" + System.getProperty("file.separator") + "com" + System.getProperty("file.separator") + "example" + System.getProperty("file.separator") + "RoostTest" + System.getProperty("file.separator") + "scenario-4d1c650f93-Test.csv";
        List<String> lines = Files.readAllLines(Paths.get(filePath)); 
        String[] data = lines.get(1).split("\\^\\|\\^"); // Assuming that the second row in file contains the required data for this test
        
        String method = data[0];
        String url = data[1];
        String headers = data[2];
        String requestBody = data[3];
        int responseCode = Integer.parseInt(data[4]);
        String responseBody = data[5];
        
        Gson gson = new Gson();
        Headers headersObj = gson.fromJson(headers, Headers.class);
        ArrayList responseBodyObj = gson.fromJson(responseBody, ArrayList.class);
        
        // Send Get Request
        Response response = RestAssured.given()
            .header("Content-Type", headersObj.getContentType())
            .when()
            .get(url)
            .then()
            .contentType(ContentType.JSON)
            .extract()
            .response();
        
        // Assertions
        response.then().statusCode(responseCode); // Status code
        response.then().body("[0].id", equalTo((int) responseBodyObj.get(0).getId()));
        response.then().body("[0].category.id", equalTo((int) responseBodyObj.get(0).getCategory().getId()));
        response.then().body("[0].category.name", equalTo(responseBodyObj.get(0).getCategory().getName()));
        response.then().body("[0].name", equalTo(responseBodyObj.get(0).getName()));
        response.then().body("[0].photoUrls[0]", equalTo(responseBodyObj.get(0).getPhotoUrls()));
        response.then().body("[0].status", equalTo(responseBodyObj.get(0).getStatus()));
    }
}

