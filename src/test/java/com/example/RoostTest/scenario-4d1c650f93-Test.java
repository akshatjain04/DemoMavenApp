/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import io.restassured.RestAssured;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class scenario4d1c650f93Test {

    @BeforeEach
    public void setUp() {
        RestAssured.baseURI = System.getenv("API_HOST");
    }

    @Test
    public void testFindPetByTags() throws IOException {
        String payloadFilePath = "src" + File.pathSeparator + "test" + File.pathSeparator + "java" 
                                 + File.pathSeparator + "com" + File.pathSeparator + "example" 
                                 + File.pathSeparator + "RoostTest" + File.pathSeparator 
                                 + "scenario-4d1c650f93-Test.csv";

        List<String> lines = Files.readAllLines(Paths.get(payloadFilePath), StandardCharsets.UTF_8);
        String[] payloadData = lines.get(1).split("\\^\\|\\^"); // get data from the second line

        String method = payloadData[0];
        String url = payloadData[1];
        Headers headers = Headers.headers(new Gson().fromJson(payloadData[2], HashMap.class));
        String requestBody = payloadData[3];
        int expectedResponseCode = Integer.parseInt(payloadData[4]);
        String expectedResponseBody = payloadData[5];

        Response response = 
            given().
                headers(headers).
                body(requestBody).
            when().
                request(method, url).
            then().
                assertThat().
                statusCode(expectedResponseCode).
                body("", equalTo(new Gson().fromJson(expectedResponseBody, HashMap.class))).
                extract().
                response();
    }
}
