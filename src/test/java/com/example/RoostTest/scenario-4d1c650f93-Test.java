/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import io.restassured.http.ContentType;
import org.testng.annotations.Test;
import java.nio.file.*;
import org.apache.commons.lang3.StringUtils;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import static org.hamcrest.Matchers.*;
import static io.restassured.RestAssured.*;

public class scenario_4d1c650f93_Test {
  
  @Test
  public void findPetByTagsTest() throws IOException, ParseException {
    String dataFile = "src" + File.separator + "test" + File.separator + "java" + File.separator + 
      "com" + File.separator + "example" + File.separator + "RoostTest" + File.separator + 
      "scenario-4d1c650f93-Test.csv";
    
    BufferedReader reader = new BufferedReader(new FileReader(dataFile));
    String row;
    while ((row = reader.readLine()) != null) {
      if(row.contains("METHOD")) continue; // Skip header row.

      List<String> elements = Arrays.asList(StringUtils.split(row, "^|^"));
      String method = elements.get(0);
      String url = elements.get(1);
      JSONObject headers = (JSONObject) new JSONParser().parse(elements.get(2));
      JSONObject reqBody = (JSONObject) new JSONParser().parse(elements.get(3));
      int responseCode = Integer.parseInt(elements.get(4));
      JSONObject respBody = (JSONObject) new JSONParser().parse(elements.get(5));

      if (method.equalsIgnoreCase("get")) {
        given()
          .contentType(ContentType.JSON)
          .headers(headers)
          .when()
          .get(url)
          .then()
          .statusCode(responseCode)
          .body("", hasSize(0)) // As per the provided response body schema, we are expecting empty array.
          .time(lessThan(50L)); // Response should be returned within 50 ms.
      } 
    }
    reader.close();
  }
}

