// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/

// ********RoostGPT********
package com.example.RoostTest;

import org.junit.Before;
import org.junit.Test;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

import static io.restassured.RestAssured.given;
import static io.restassured.matcher.RestAssuredMatchers.matchesXsdInClasspath;
import static org.hamcrest.core.IsEqual.equalTo;

public class scenario3b42622a1dTest {  
    private String method;
    private String url;
    private HashMap<String, String> headers;
    private String reqBody;
    private int responseCode;
    private String respBody;
    private final String PATH = "src\\test\\java\\com\\example\\RoostTest\\scenario-3b42622a1d-Test.csv".replace("\\", System.getProperty("file.separator"));

    @Before
    public void setup() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(PATH));
        String line = null;
        while ((line = reader.readLine()) != null) {
            // Skip the header and empty lines
            if (line.matches("^METHOD|^|^URL|^|^REQ_HEADERS|^|^REQ_BODY|^|^RESPONSE_CODE|^|^RESPONSE_BODY") || line.equals("")) {
                continue;
            }
            
            // Get the payload by splitting the line
            String[] payload = line.split("\\^\\|\\^");
            method = payload[0];
            url = payload[1].replace("\"", "");
            
            // Convert REQ_HEADERS to HashMap
            headers = new HashMap<String, String>();
            String[] reqHeaders = payload[2].replace("{", "").replace("}", "").split(",");
            for (String header : reqHeaders) {
                String[] headerParts = header.split(":");
                headers.put(headerParts[0].replace("\"", ""), headerParts[1].replace("\"", ""));
            }
            
            reqBody = payload[3].replace("\"", "");
            responseCode = Integer.parseInt(payload[4]);
            respBody = payload[5].replace("\"", "");
        }
        reader.close();
    }
    
    @Test
    public void createPetTest() {
        given()
            .headers(headers)
            .body(reqBody)
        .when()
            .request(method, url)
        .then()
            .statusCode(responseCode)
            .body(matchesXsdInClasspath(respBody))
            .time(lessThan(50L)); // Time in milliseconds
    }
}
