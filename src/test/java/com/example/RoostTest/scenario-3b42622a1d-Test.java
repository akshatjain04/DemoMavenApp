/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import static io.restassured.http.ContentType.JSON;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.testng.Assert;
import org.testng.annotations.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class scenario3b42622a1dTest {

    @Test
    public void createPetWithParameters() throws IOException {
        // Reading payload file
        String filePath = "src"+ java.io.File.separator +"test" + java.io.File.separator 
                          + "java" + java.io.File.separator + "com" + java.io.File.separator
                          + "example" + java.io.File.separator +"RoostTest"+ java.io.File.separator
                          + "scenario-3b42622a1d-Test.csv";
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String row;
        while ((row = reader.readLine()) != null) {
            String[] payload = row.split("\\^\\|\\^");
            if(payload[0].equals("METHOD")) continue; //Skip the headers

            // Setup the Request
            String baseURL = System.getenv("API_HOST");
            RequestSpecification requestSpec = RestAssured.given();

            // Set Headers
            requestSpec.contentType(JSON).headers("Authorization", "Bearer xyz");

            // Set Payload
            requestSpec.body(payload[3]);

            // Send the Request
            Response response = requestSpec.post(baseURL.concat(payload[1]));

            // Validate the Response
            Assert.assertEquals(response.getStatusCode(), Integer.parseInt(payload[4]));
            Assert.assertEquals(response.getBody().jsonPath().getInt("id"), payload[4]);
            Assert.assertEquals(response.getBody().jsonPath().getString("name"), payload[4]);
            Assert.assertEquals(response.getBody().jsonPath().getString("status"), payload[4]);
            Assert.assertEquals(response.getBody().jsonPath().getString("message"), "Pet added successfully");
        }
        reader.close();
    }
}
