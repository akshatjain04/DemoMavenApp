/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import java.util.Map;
import com.opencsv.CSVReader;
import java.io.FileReader;
import java.io.IOException;
import org.json.JSONObject;

class scenario_3b42622a1d_Test {

    @Test
    void createPetWithParameters(){
        try {
            // Opening the csv file containing desired parameters and reading the lines
            CSVReader reader = new CSVReader(new FileReader("src\\test\\java\\com\\example\\RoostTest\\scenario-3b42622a1d-Test.csv"));
            String[] line;

            // Skipping the header line in the csv file
            reader.readNext();
            while ((line = reader.readNext()) != null) {
                String Method = line[0];
                String URL = line[1];
                JSONObject REQ_HEADERS = new JSONObject(line[2]);
                JSONObject REQ_BODY = new JSONObject(line[3]);
                int RESPONSE_CODE = Integer.parseInt(line[4]);
                JSONObject RESPONSE_BODY = new JSONObject(line[5]);

                // Sending POST request to the given endpoint
                RequestSpecBuilder builder = new RequestSpecBuilder();
                //Adding headers
                for(String key: REQ_HEADERS.keySet()){
                    String value = REQ_HEADERS.getString(key);
                    builder.addHeader(key, value);
                }

                //Adding payload
                builder.setBody(REQ_BODY.toString());

                //Sending request
                Response response = RestAssured.given().spec(builder.build()).post(URL);
                assertThat(response.statusCode(), equalTo(RESPONSE_CODE)); // validating the status code
                JSONObject respJson = new JSONObject(response.body().asString());
                assertThat(respJson.toString(), equalTo(RESPONSE_BODY.toString())); // validating the response body
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
