/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import io.restassured.RestAssured;
import org.apache.http.HttpStatus;
import org.testng.annotations.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.nio.file.FileSystems;
import java.nio.file.Paths;
import com.google.gson.Gson;
import java.util.Map;

public class scenario3b42622a1dTest {

    // Set base URI
    static {
        RestAssured.baseURI = System.getenv("API_HOST");
    }

    @Test
    public void createPetWithParametersTest() throws Exception {
        // Get payload data 
        BufferedReader reader = new BufferedReader(new FileReader(Paths.get(System.getProperty("user.dir"), FileSystems.getDefault().getSeparator(), "src", "test", "java", "com", "example", "RoostTest", "scenario-3b42622a1d-Test.csv").toString()));
        String line;
        reader.readLine();  // skip first line
        
        // Loop through lines
        while ((line = reader.readLine()) != null) {
            String[] data = line.split("\\^\\|\\^");
            String method = data[0];
            String url = data[1];
            Map<String, String> headers = new Gson().fromJson(data[2], Map.class);
            String body = data[3];
            int expectedStatusCode = Integer.parseInt(data[4]);
            
            // Make the request and assert the response
            RestAssured.given()
                .headers(headers)
                .body(body)
                .when()
                .request(method, url)
                .then()
                .statusCode(expectedStatusCode)
                .log().all();
        }

        reader.close();
    }
}
