/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.json.JSONObject;
import org.json.JSONArray;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import java.nio.file.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Map;

public class FindPetByStatusGivenTheApiRunningAtHttpPetstoreSwaggerIoV2AndAnEndpointOfHttpPetstoreSwaggerIoV2PetFindByStatusWhenAGetRequestIsMadeAndTheStatusParameterIsTestAndTheAcceptsHeaderIsApplicationJsonThenA200ResponseIsReturnedWithin50MsTest {

    private Response response;
    private RequestSpecification request;

    @Before
    public void setUp() throws Exception{
        String path = "src" + File.pathSeparator + "test" + File.pathSeparator + "java" + File.pathSeparator + "com" + File.pathSeparator + "example" + File.pathSeparator + "RoostTest" + File.pathSeparator + "scenario-af113c2b1f-Test.csv";
        BufferedReader reader = new BufferedReader(new FileReader(path));
        String lineJustFetched = null;

        for(int i=0;i<lineJustFetched.split("\\^\\|\\^").length;i++){
            JSONObject requestHeaders = new JSONObject(lineJustFetched.split("\\^\\|\\^")[2]);
            String url = lineJustFetched.split("\\^\\|\\^")[1];

            RestAssured.baseURI = System.getenv("API_HOST");
            request = RestAssured.given();
            request.header("Content-Type", "application/json");
            for(String key: requestHeaders.keySet()){
                request.header(key, requestHeaders.get(key).toString());
            }

            response = request.get(url);
            assertEquals(200, response.getStatusCode());
        }
        reader.close();
    }

    @Test
    public void testFindPetByStatus(){
        //Asserting Response
        assertEquals(200, response.getStatusCode());

        //Getting Response as JSON Array
        JSONArray res = new JSONArray(response.getBody().asPrettyString());

        for(int i=0; i<res.length(); i++){
            JSONObject resObj = res.getJSONObject(i);

            //Asserting attributes in the response
            assertTrue(resObj.has("id"));
            assertTrue(resObj.has("category"));
            assertTrue(resObj.has("name"));
            assertTrue(resObj.has("photoUrls"));
            assertTrue(resObj.has("tags"));
            assertTrue(resObj.has("status"));

            //Asserting 'category' attributes
            JSONObject categoryObj = resObj.getJSONObject("category");
            assertTrue(categoryObj.has("id"));
            assertTrue(categoryObj.has("name"));

            //Checking whether 'status' is 'test'
            assertEquals("test", resObj.getString("status"));
        }
    }
}
