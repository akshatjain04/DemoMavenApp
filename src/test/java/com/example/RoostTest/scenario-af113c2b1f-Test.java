// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","'
}

*/

// ********RoostGPT********
package com.example.RoostTest;

import static org.hamcrest.Matchers.*;
import io.restassured.response.ValidatableResponse;
import org.testng.annotations.Test;

public class scenario-af113c2b1f-Test {
    Map<String, String> headers = new HashMap<String, String>();
    String responseBody = "{\"response\": \"responseObject\"}";

    @Test
    public void scenarioTest() throws IOException {
        File dataFile = new File("src" + File.separator + "test"
                + File.separator + "java" + File.separator + "com" 
                + File.separator + "example" + File.separator 
                + "RoostTest" + File.separator + "scenario-af113c2b1f-Test.csv");
        BufferedReader br = new BufferedReader(new FileReader(dataFile));
        String row;
        while ((row = br.readLine()) != null) {
            if(row.isEmpty()) {
                continue;
            }
            String[] data = row.split("\\^\\|\\^");
            String method = data[0];
            String url = data[1];
            JsonObject headersObject  = new JsonParser().parse(data[2]).getAsJsonObject();
            String reqBody = data[3];
            int resCode = Integer.parseInt(data[4]);
            String resBody = data[5];

            Iterator<String> i = headersObject.keySet().iterator();
            while (i.hasNext()) {
                String key = i.next();
                headers.put(key, headersObject.get(key).getAsString());
            }

            if (method.equals("GET")) {
                ValidatableResponse res = given().headers(headers).when().get(url).then();

                res.statusCode(resCode);
                res.body(equalTo(resBody));
            }
        }
        br.close();
    }
}
