/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.lessThan;
import com.jayway.restassured.path.json.JsonPath;
import com.jayway.restassured.RestAssured.*;
import com.jayway.restassured.http.ContentType;
import com.jayway.restassured.matcher.RestAssuredMatchers.*;
import org.hamcrest.Matchers.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import org.json.JSONArray;
import org.json.JSONObject;

public class scenario-af113c2b1f-Test {
    @Test
    public void findPetByStatusTest() {
        BufferedReader reader;
        try {
            reader = new BufferedReader(new FileReader(
                    "src\\test\\java\\com\\example\\RoostTest\\scenario-af113c2b1f-Test.csv"));
            reader.readLine(); // skip the first line, the header
            String row = "";
            while((row = reader.readLine()) != null) {
                String[] payload = row.split("^|^");
                String method = payload[0];
                String url = payload[1];
                JSONObject req_headers = new JSONObject(payload[2]); // assuming we have a JSON object
                JSONObject req_body = new JSONObject(payload[3]);
                int response_code = Integer.parseInt(payload[4]);
                JSONObject response_body = new JSONObject(payload[5]);

                given().
                    header("Accept", req_headers.getString("Accept")).
                    queryParam("status", "test").
                when().
                    get(url).
                then().
                    assertThat().statusCode(response_code).
                    assertThat().contentType(ContentType.JSON).
                    assertThat().body(Matchers.equalTo(response_body)).
                    assertThat().time(lessThan(50L)); // response time
                }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
