/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

import org.json.JSONException;
import org.json.JSONObject;
import org.testng.annotations.Test;

import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import static io.restassured.RestAssured.given;
import static org.testng.Assert.assertEquals;

public class scenario2Test {

    // There is no API in petstore where name and status are passed as query parameters. So this test is adjusted according to passing name and status in body itself.
    @Test
    public void CreatePetWithParametersTest() throws JSONException {

        String fileName = "src/test/java/com/example/RoostTest/scenario2Test.csv";
        String line = "";
        String cvsSplitBy = "\\^\\|\\^";

        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            br.readLine(); // Skipping headers

            while ((line = br.readLine()) != null) {
                String[] payload = line.split(cvsSplitBy, -1);

                String method = payload[0].replace("\"", "");
                String url = payload[1].replace("\"", "");
                String reqHeaders = payload[2];
                String reqBody = payload[3];
                int responseCode = Integer.parseInt(payload[4].replace("\"", ""));
                JSONObject responseBody = new JSONObject(payload[5]);

                if (method.equalsIgnoreCase("POST")) {
                    Response response = given()
                            .headers(JsonPath.from(reqHeaders).getMap("$"))
                            .body(JsonPath.from(reqBody).getMap("$"))
                            .when().post(url).then().extract().response();
                    assertEquals(response.statusCode(), responseCode);

                    assertEquals(response.jsonPath().get("category.name"),
                            responseBody.getJSONObject("category").getString("name"));
                    assertEquals(response.jsonPath().get("status"),
                            responseBody.getString("status"));
                }

            }
            br.close();

        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}
