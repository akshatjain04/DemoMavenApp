/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/
package com.example.RoostTest;

import com.jayway.restassured.path.json.JsonPath;
import com.jayway.restassured.response.Response;

import java.io.BufferedReader;
import java.io.FileReader;

import static com.jayway.restassured.RestAssured.*;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class scenario2Test {
    // test case to create pet with parameters
    @Test 
    public void testCreatePetWithParameters() {
        String csvFile = "./scenario2Test.csv";
        BufferedReader reader;
        String baseUrl = System.getenv("API_HOST");
        String line = "";

        try {
            reader = new BufferedReader(new FileReader(csvFile));
            while ((line = reader.readLine()) != null) {

                String[] data = line.split("^|^");
                if (data[0].equals("POST")) {

                    String apiURL = baseUrl + data[1];
                    String reqHeaders = data[2].replace("\"", "");
                    String reqBody = data[3].replace("\"", "");
                    int resCode = Integer.parseInt(data[4].replace("\"", ""));

                    Response res = given()
                                    .header("Content-Type", "application/json")
                                    .body(reqBody)
                                    .post(apiURL);

                    assertEquals(res.statusCode(), resCode);
                    assertEquals(res.jsonPath().get("message").toString(), "success");

                    JsonPath jsonPathEvaluator = res.jsonPath();
                    String name = jsonPathEvaluator.get("name");
                    assertEquals(name, "doggies");
                    String status = jsonPathEvaluator.get("status");
                    assertEquals(status, "available");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
